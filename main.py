import telebot
import datetime as dt
import pyfiglet
import time
from bs4 import BeautifulSoup as bf
import datetime
import csv
import schedule
banner = pyfiglet.figlet_format("404",font='banner3-d')
bann = pyfiglet.figlet_format("anfisa",font='banner3-d')
print(bann)
print("[+] –ë–æ—Ç —Ä–∞–±–æ—Ç–∞–µ—Ç")
bot = telebot.TeleBot('6196985961:AAFqZjz-0CrroQrjDQiZjIBF81NdjYtBCXQ')


@bot.message_handler(commands=['help'])
def help_message(message):
    bot.send_message(message.chat.id, '–ë–æ—Ç –Ω–∞—Ö–æ–¥–∏—Ç—Å—è –≤ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–µ –∏ –Ω–µ –≤—ã–ø–æ–ª–Ω—è–µ—Ç –±–∞–∑–æ–≤—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏')


@bot.message_handler(commands=['start'])
def start(message):
    markup = telebot.types.ReplyKeyboardMarkup(resize_keyboard=True)
    markup.row_width = 1
    markup.row('/start', '/help')
    bot.send_animation(message.chat.id, 'https://i.giphy.com/26gsuUjoEBmLrNBxC.gif')
    bot.send_message(message.chat.id, text=f'\
                                    \n–ü—Ä–∏–≤–µ—Ç {message.from_user.first_name}!\
                                    \n‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ\
                                    \n –Ø –≤–∏—Ä—Ç—É–∞–ª—å–Ω—ã–π –ø–æ–º–æ—â–Ω–∏–∫ –ê–Ω—Ñ–∏—Å–∞!\
                                    \n –¥–ª—è –Ω–∞—á–∞–ª–∞ –º–æ–∂–µ—Ç–µ —Å–ø—Ä–æ—Å–∏—Ç—å –∫–∞–∫ —É –º–µ–Ω—è –¥–µ–ª–∞üòà\
                                    \n‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ', reply_markup=markup)


def create_calendar(year, month):
    markup = telebot.types.InlineKeyboardMarkup()
    days_in_month = (datetime.date(year, month + 1, 1) - datetime.date(year, month, 1)).days
    # –°–æ–∑–¥–∞–Ω–∏–µ –∫–Ω–æ–ø–æ–∫ –¥–ª—è –∫–∞–∂–¥–æ–≥–æ –¥–Ω—è –º–µ—Å—è—Ü–∞
    buttons = [telebot.types.InlineKeyboardButton(str(day),row_width=5, callback_data=f'select_day_{day}_{month}',) for day in range(1, days_in_month + 1)]
    markup.add(*buttons)
    # –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –∫–Ω–æ–ø–∫–∏ "–ü—Ä–æ–≤–µ—Ä–∏—Ç—å –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è"
    check_reminders_button = telebot.types.InlineKeyboardButton('–ü—Ä–æ–≤–µ—Ä–∏—Ç—å –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è', callback_data='check_reminders')
    markup.add(check_reminders_button)
    return markup


@bot.message_handler(commands=['kalendar'])
def start_command(message):
    now = datetime.datetime.now()
    calendar = create_calendar(now.year, now.month)
    bot.send_message(message.chat.id, '–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–Ω—å:', reply_markup=calendar)


@bot.callback_query_handler(func=lambda call: call.data.startswith('select_day_'))
def select_day_callback(call):
    selected_day, selected_month = map(int, call.data.split('_')[2:])
    bot.send_message(call.message.chat.id, f'–í—ã –≤—ã–±—Ä–∞–ª–∏ –¥–µ–Ω—å {selected_day}. –í–≤–µ–¥–∏—Ç–µ —Ç–µ–∫—Å—Ç:')
    bot.register_next_step_handler(call.message, select_month, selected_day, selected_month)


def select_month(message, selected_day, selected_month):
    reminder_text = message.text
    months = {
        '–Ø–Ω–≤–∞—Ä—å': 1,
        '–§–µ–≤—Ä–∞–ª—å': 2,
        '–ú–∞—Ä—Ç': 3,
        '–ê–ø—Ä–µ–ª—å': 4,
        '–ú–∞–π': 5,
        '–ò—é–Ω—å': 6,
        '–ò—é–ª—å': 7,
        '–ê–≤–≥—É—Å—Ç': 8,
        '–°–µ–Ω—Ç—è–±—Ä—å': 9,
        '–û–∫—Ç—è–±—Ä—å': 10,
        '–ù–æ—è–±—Ä—å': 11,
        '–î–µ–∫–∞–±—Ä—å': 12
    }
    keyboard = telebot.types.ReplyKeyboardMarkup(row_width=4)
    buttons = [telebot.types.InlineKeyboardButton(text=month) for month in months]
    keyboard.add(*buttons)
    bot.send_message(message.chat.id, '–í—ã–±–µ—Ä–µ—Ç–µ –º–µ—Å—è—Ü –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è:',
                    reply_markup=keyboard)
    bot.register_next_step_handler(message, select_time, selected_day, selected_month, months, reminder_text)


def select_time(message, selected_day, selected_month, months,reminder_text):
    try:
        selected_month = months[message.text]
        try:
            if selected_month > 0 and selected_month <= 12:
                keyboard = telebot.types.ReplyKeyboardRemove()
                bot.send_message(message.chat.id, '–í–≤–µ–¥–∏—Ç–µ –≤—Ä–µ–º—è (–≤ —Ñ–æ—Ä–º–∞—Ç–µ HH:MM) –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è:', reply_markup=keyboard)
                bot.register_next_step_handler(message, save_reminder, selected_day, selected_month, reminder_text)
            else:
                bot.send_message(message.chat.id, '–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.')
                bot.register_next_step_handler(message, select_month, selected_day, selected_month)
        except ValueError:
            bot.send_message(message.chat.id, '–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.')
            bot.register_next_step_handler(message, select_month, selected_day, selected_month)
    except KeyError:
        bot.send_message(message.chat.id, '–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.')
        bot.register_next_step_handler(message, select_month, selected_day, selected_month)
    except ValueError:
        bot.send_message(message.chat.id, '–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.')
        bot.register_next_step_handler(message, select_month, selected_day, selected_month)


def save_reminder(message, selected_day, selected_month, reminder_text):
    reminder_time = message.text
    with open('reminders.csv', 'a', newline='', encoding='utf-8') as file:
        writer = csv.writer(file)
        writer.writerow([message.chat.id, message.from_user.first_name, selected_day, selected_month, reminder_time, reminder_text])
    # –ó–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞—Ç—å –æ—Ç–ø—Ä–∞–≤–∫—É –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è –≤ –≤—ã–±—Ä–∞–Ω–Ω—ã–π –¥–µ–Ω—å
    now = datetime.datetime.now()
    target_date = datetime.datetime(datetime.datetime.now().year, selected_month, selected_day)
    target_time = datetime.datetime.strptime(reminder_time, '%H:%M').time()
    target_datetime = datetime.datetime.combine(target_date, target_time)
    schedule.every().day.at(target_datetime.strftime('%H:%M')).do(send_reminder, message.chat.id, reminder_text)
    bot.send_message(message.chat.id, f'–ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ –Ω–∞ {selected_day} —á–∏—Å–ª–æ {selected_month} –º–µ—Å—è—Ü–∞ –≤ {reminder_time}:\n\n{reminder_text}')
    while True:
        schedule.run_pending()
        time.sleep(1)
def send_reminder(chat_id, reminder_text):
    bot.send_message(chat_id, f'–ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ:\n\n{reminder_text}')
@bot.callback_query_handler(func=lambda call: call.data == 'check_reminders')
def check_reminders_callback(call):
    reminders = get_future_reminders(call.message.chat.id)
    if reminders:
        reminders_text = '\n\n'.join(
            [f'{reminder.date.strftime("%d.%m.%Y")} –≤ {reminder.time}: {reminder.text}' for reminder in reminders])
        bot.send_message(call.message.chat.id, f'–ë—É–¥—É—â–∏–µ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è:\n\n{reminders_text}')
    else:
        bot.send_message(call.message.chat.id, '–£ –≤–∞—Å –ø–æ–∫–∞ –Ω–µ—Ç –±—É–¥—É—â–∏—Ö –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–π')
def get_future_reminders(chat_id):
    now = datetime.datetime.now()
    reminders = []
    with open('reminders.csv', 'r', encoding='utf-8') as file:
        reader = csv.reader(file)
        for row in reader:
            user_id, user_name, day, month, time, text = row[0], row[1], int(row[2]), int(row[3]), row[4], row[5]
            target_date = datetime.datetime(datetime.datetime.now().year, int(month), int(day))
            target_time = datetime.datetime.strptime(time, '%H:%M')
            target_datetime = datetime.datetime.combine(target_date, target_time.time())
            if target_datetime > now and user_id == str(chat_id):
                reminders.append(Reminder(target_date, target_time, text))
    return reminders
class Reminder:
    def __init__(self, date, time, text):
        self.date = date
        self.time = time
        self.text = text
@bot.message_handler(func=lambda message: True)
def handle_question(message):
    try:
        if message.text:
            question = message.text.lower()
            if "–ø–æ–≥–æ–¥–∞ –≤" in question:
                if '–ø–∏—Ç–µ—Ä–µ' in question:
                    city = 'C–∞–Ω–∫—Ç-–ü–µ—Ç–µ—Ä–±—É—Ä–≥'
                    answer = f'–í –°–∞–Ω–∫—Ç-–ü–µ—Ç–µ—Ä–±—É—Ä–≥–µ\n{get_weather(city)}'
                elif '–º–æ—Å–∫–≤–µ' in question:
                    city = '–ú–æ—Å–∫–≤–∞'
                    answer = f'–í –ú–æ—Å–∫–≤–µ\n{get_weather(city)}'
                elif '–∫—Ä–∞—Å–Ω–æ–¥–∞—Ä' in question or '–∞—Ä–º–∞–≤–∏—Ä–µ' in question or '–∞—Ä–º–∞–≤–∏—Ä' in question:
                    city = '–∫—Ä–∞—Å–Ω–æ–¥–∞—Ä'
                    answer = f'–í {message.text}\n{get_weather_krasnodar(message)}'
                else:
                    city = question.split()[-1]
                    answer = f'–Ø –Ω–µ –∑–Ω–∞—é –ø–æ–≥–æ–¥—ã –≤ {city}'
            elif '–ø—Ä–∏–≤–µ—Ç' in question or '–ü—Ä–∏–≤–µ—Ç' in question:
                answer = start(message)
            elif '–ö–∞–ª–µ–Ω–¥–∞—Ä—å' in question or '–∫–∞–ª–µ–Ω–¥–∞—Ä—å' in question:
                return start_command(message)
            elif '–ø–æ–≥–æ–¥–∞' in question or "–°–∫–∞–∑–∞—Ç—å –ø–æ–≥–æ–¥—É" in question:
                city = "–ú–æ—Å–∫–≤–∞"
                answer = f'–í –ú–æ—Å–∫–≤–µ\
                \n {get_weather(city)}\
                \n –î–ª—è –≤—ã–±–æ—Ä–∞ –≥–æ—Ä–æ–¥–∞ –ø—Ä–æ—Å—Ç–æ —Å–ø—Ä–æ—Å–∏—Ç–µ "–ü–æ–≥–æ–¥–∞ –≤ ...'
            elif "–≤—Ä–µ–º—è –≤" in question or "—Å–∫–æ–ª—å–∫–æ –≤—Ä–µ–º—è –≤" in question:
                if '–ø–∏—Ç–µ—Ä–µ' == question.split()[2] or '–ø–∏—Ç–µ—Ä–µ' == question.split()[1] or '–ø–∏—Ç–µ—Ä–µ' == question.split()[0]:
                    city = '–°–∞–Ω–∫—Ç-–ü–µ—Ç–µ—Ä–±—É—Ä–≥'
                    answer = f'{get_time(city)}'
                elif '–º–æ—Å–∫–≤–µ' == question.split()[2] or '–º–æ—Å–∫–≤–µ' == question.split()[1] or '–º–æ—Å–∫–≤–µ' == question.split()[0]:
                    city = '–ú–æ—Å–∫–≤–∞'
                    answer = get_time(city)
                else:
                    city = question.split()[2]
                    answer = get_time(city)
            elif "–≤—Ä–µ–º—è" in question or "—Å–∫–æ–ª—å–∫–æ –≤—Ä–µ–º—è" in question:
                city = "–ú–æ—Å–∫–≤–∞"
                answer = f'\
                    \n{get_time(city)}\
                \n –î–ª—è –≤—ã–±–æ—Ä–∞ –≥–æ—Ä–æ–¥–∞ –ø—Ä–æ—Å—Ç–æ \
                \n—Å–ø—Ä–æ—Å–∏—Ç–µ "–í—Ä–µ–º—è –≤ ...'
            elif '–∫–∞–∫ –¥–µ–ª–∞' in question or '–∫–∞–∫ –¥–µ–ª–∞?' in question or '–∫–∞–∫ —É —Ç–µ–±—è –¥–µ–ª–∞?' in question:
                bot.send_animation(message.chat.id, "https://i.giphy.com/media/dANWlKmK8q0lT7v9k1/giphy.mp4",)
                answer = f'–í—Å–µ –æ—Ç–ª–∏—á–Ω–æ! –†–∞—Å—Å–∫–∞–∑–∞—Ç—å —á—Ç–æ —è —É–º–µ—é)?'
            elif '–¥–∞' in question or '–∫–æ–Ω–µ—á–Ω–æ' in question or '–î–∞' in question or '–î–∞–≤–∞–π' in question:
                return yourself(message)
            elif '–∫–∞–∫' in question or '–∫–∞–∫ –¥–µ–ª–∞—Ç—å' in question or '–∫–∞–∫ —Å–¥–µ–ª–∞—Ç—å' in question:
                ser = question
                url = 'https://www.youtube.com/results?search_query=' + '+'.join(ser.split(' '))
                answer = f'–í–æ—Ç —á—Ç–æ –º–Ω–µ —É–¥–∞–ª–æ—Å—å –Ω–∞–π—Ç–∏ –≤ –∏–Ω—Ç–µ—Ä–Ω–µ—Ç–µ {url}'
            elif '—Ç–∞–π–º–µ—Ä' in question:
                return set_timer(message)
            elif '–∫—É—Ä—Å' in question:
                return money(message)
            elif '—á—Ç–æ —Ç—ã –µ—â–µ —É–º–µ–µ—à—å?' in question or '—á—Ç–æ —Ç—ã –µ—â–µ —É–º–µ–µ—à—å' in question:
                try:
                    return battun_for_skils(message)
                except telebot.apihelper.ApiTelegramException:
                    return bot.send_message(message.chat.id, text='ERROR 403')
            elif '–∏–≥—Ä–∞' in question:
                answer = bot.answer_callback_query(message.chat.id, text='–í –¥–∞–Ω–Ω—ã–π –º–æ–º–µ–Ω—Ç —ç—Ç–æ –Ω–µ –¥–æ—Å—Ç—É–ø–Ω–æ')
            else:
                user_query = str(question)
                url = 'https://yandex.ru/search/?text=' + '%20'.join(user_query.split(' '))
                answer = f'–í–æ—Ç —á—Ç–æ –º–Ω–µ —É–¥–∞–ª–æ—Å—å –Ω–∞–π—Ç–∏ –≤ –∏–Ω—Ç–µ—Ä–Ω–µ—Ç–µ {url}'
            bot.reply_to(message, answer)
    except telebot.apihelper.ApiTelegramException:
        return bot.send_message(message.chat.id, text='402 –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–æ')
@bot.message_handler(commands=['change_city'])
def change_city(message):
    global city
    city = message.text.split()[1]
    bot.send_message(message.chat.id, f'–ì–æ—Ä–æ–¥ –∏–∑–º–µ–Ω–µ–Ω –Ω–∞ {city}')
UTC_OFFSET = {
    '–ú–æ—Å–∫–≤–∞': 3,
    '–°–∞–Ω–∫—Ç-–ü–µ—Ç–µ—Ä–±—É—Ä–≥': 3,
    '–Ω–æ–≤–æ—Å–∏–±–∏—Ä—Å–∫': 7,
    '–ù–æ–≤–æ—Å–∏–±–∏—Ä—Å–∫': 7
}
def download(message):
    bot.answer_callback_query(message.chat.id, text=f'–∑–∞—Ä–≥—É–∑–∫–∞ üôÑ')
def answers_for_skils(call):
    try:
        if call.data == 'butt1':
            download(call.message)
            set_timer(call.message)
        elif call.data == 'butt2':
            try:
                return get_time(city)
            except NameError:
                return bot.answer_callback_query(call.id, text=f'–∫–Ω–æ–ø–∫–∞ –Ω–µ –¥–æ—Å—Ç—É–ø–Ω–∞, –Ω–æ –º–æ–∂–µ—Ç–µ –Ω–∞–ø–∏—Å–∞—Ç—å "–≤—Ä–µ–º—è"')
        elif call.data == 'butt3':
            try:
                return bot.send_message(call, text=f'{get_weather(city)}')
            except NameError:
                return bot.answer_callback_query(call.id, text=f'–∫–Ω–æ–ø–∫–∞ –Ω–µ –¥–æ—Å—Ç—É–ø–Ω–∞, –Ω–æ –º–æ–∂–µ—Ç–µ –Ω–∞–ø–∏—Å–∞—Ç—å "–ø–æ–≥–æ–¥–∞"')
        elif call.data == 'butt4':
            return bot.answer_callback_query(call.id, text='–í –¥–∞–Ω–Ω—ã–π –º–æ–º–µ–Ω—Ç —ç—Ç–æ –Ω–µ –¥–æ—Å—Ç—É–ø–Ω–æ')
        else:
            bot.answer_callback_query(call.id, text='–û—à–∏–±–∫–∞!')
    except telebot.apihelper.ApiTelegramException:
        return bot.send_message(call.message.chat.id, text='ERROR 400')
def get_time(city):
    if city in UTC_OFFSET:
        offset = UTC_OFFSET[city]
        city_time = dt.datetime.utcnow() + dt.timedelta(hours=offset)
        f_time = city_time.strftime("%H:%M")
        return f'–í –≥–æ—Ä–æ–¥–µ {city}\
            \n‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ\
            \n—Å–µ–π—á–∞—Å {f_time} ‚è≥'
    else:
        return f'–ö —Å–æ–∂–∞–ª–µ–Ω–∏—é, —è –Ω–µ –∑–Ω–∞—é –≤—Ä–µ–º–µ–Ω–∏ –≤ –≥–æ—Ä–æ–¥–µ {city}'

def yourself(message):
    bot.send_animation(message.chat.id,'https://i.giphy.com/media/n7IyB6qZOFFCgFGGkT/giphy.mp4')
    bot.send_message(message.chat.id, text="–í–æ—Ç —á—Ç–æ —è –º–æ–≥—É:\
                                \n„Éª –ø–æ—Å—Ç–∞–≤–∏—Ç—å —Ç–∞–π–º–µ—Ä ‚è±Ô∏è\
                                \n„Éª —Ä–∞—Å—Å–∫–∞–∑–∞—Ç—å –ø—Ä–æ –ø–æ–≥–æ–¥—É üå§Ô∏è\
                                \n„Éª –≤–µ—Å—Ç–∏ –≤–∞—à –∫–∞–ª–µ–Ω–¥–∞—Ä—å üóì\
                                \n„Éª —Ä–∞—Å—Å–∫–∞–∑–∞—Ç—å –ø—Ä–æ –Ω–∞—Å—Ç–æ—è—â–∏–π –∫—É—Ä—Å üí≤\
                                \n‚û§ –ù–æ –µ—Å–ª–∏ —è —á–µ–≥–æ - —Ç–æ –Ω–µ –∑–Ω–∞—é, —è –æ–±—Ä–∞—â—É—Å—å –∫ —Ä–µ—Å—É—Ä—Å–∞–º –≤ –∏–Ω—Ç–µ—Ä–Ω–µ—Ç–µ ‚ò∫Ô∏è\
                                            ")
    battun_for_skils(message)


import requests

def get_weather(city):
    url = f'http://wttr.in/{city}'
    weather_parameters = {
        'format': 2,
        'M': ''
    }
    request_headers = {
        'Accept-Language': 'ru'
    }
    try:
        response = requests.get(url, params=weather_parameters, headers=request_headers)
    except requests.ConnectionError:
        return '<—Å–µ—Ç–µ–≤–∞—è –æ—à–∏–±–∫–∞>'
    if response.status_code == 200:
        return response.text
    else:
        return '<–æ—à–∏–±–∫–∞ –Ω–∞ —Å–µ—Ä–≤–µ—Ä–µ –ø–æ–≥–æ–¥—ã>'

def get_weather_krasnodar(message):
    url = f'https://wttr.in/–∫—Ä–∞—Å–Ω–æ–¥–∞—Ä'
    weather_parameters = {
        'format': 2,
        'M': ''
    }
    request_headers = {
        'Accept-Language': 'ru'
    }
    try:
        response = requests.get(url, params=weather_parameters, headers=request_headers)
    except requests.ConnectionError:
        return '<—Å–µ—Ç–µ–≤–∞—è –æ—à–∏–±–∫–∞>'
    if response.status_code == 200:
        return response.text
    else:
        return '<–æ—à–∏–±–∫–∞ –Ω–∞ —Å–µ—Ä–≤–µ—Ä–µ –ø–æ–≥–æ–¥—ã>'
def set_timer(message):
    try:
        keyboard = telebot.types.InlineKeyboardMarkup()
        button_5sec = telebot.types.InlineKeyboardButton(text='5 —Å–µ–∫', callback_data='5')
        button_5min = telebot.types.InlineKeyboardButton(text='5 –º–∏–Ω', callback_data='300')
        button_10min = telebot.types.InlineKeyboardButton(text='10 –º–∏–Ω', callback_data='600')
        button_30min = telebot.types.InlineKeyboardButton(text='30 –º–∏–Ω', callback_data='1800')
        button_60min = telebot.types.InlineKeyboardButton(text='60 –º–∏–Ω', callback_data='3600')
        keyboard.row(button_5sec)
        keyboard.row(button_5min, button_10min)
        keyboard.row(button_30min, button_60min)
        bot.send_message(message.chat.id, '–í—ã–±–µ—Ä–∏—Ç–µ –≤—Ä–µ–º—è:', reply_markup=keyboard)
    except telebot.apihelper.ApiTelegramException:
        return f'ERROR try one more later\
            \n {bann}'
stop_timer = False


def start_timer(duration, chat_id):
    global stop_timer
    keyboard = telebot.types.InlineKeyboardMarkup()
    button_stop = telebot.types.InlineKeyboardButton(text='–û—Ç–º–µ–Ω–∞ ‚ùå', callback_data='stop')
    keyboard.add(button_stop)
    message = bot.send_message(chat_id, text=f'–¢–∞–π–º–µ—Ä –Ω–∞ {duration // 60} –º–∏–Ω—É—Ç {duration % 60} —Å–µ–∫—É–Ω–¥ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω ‚úÖ', reply_markup=keyboard)
    for i in range(duration, 0, -1):
        if stop_timer:
            stop_timer = False
            bot.send_message(chat_id, text='–¢–∞–π–º–µ—Ä –æ—Ç–º–µ–Ω–µ–Ω ‚ùå')
            return
        bot.edit_message_text(chat_id=chat_id, message_id=message.message_id, text=f'–û—Å—Ç–∞–ª–æ—Å—å {i // 60} –º–∏–Ω—É—Ç {i % 60} —Å–µ–∫—É–Ω–¥',reply_markup=keyboard)
        time.sleep(1)
    bot.send_animation(chat_id, 'https://i.giphy.com/media/4YXUhN0154lr6gNXpy/giphy.mp4')
    bot.send_message(chat_id, '–í—Ä–µ–º—è –≤—ã—à–ª–æ!')

@bot.callback_query_handler(func=lambda call: True)
def callback_handler(call):
    try:
        global stop_timer  # –û–±—ä—è–≤–ª—è–µ–º, —á—Ç–æ –∏—Å–ø–æ–ª—å–∑—É–µ–º –≥–ª–æ–±–∞–ª—å–Ω—É—é –ø–µ—Ä–µ–º–µ–Ω–Ω—É—é stop_timer
        if call.data == 'stop':
            stop_timer = True
        elif call.data.isdigit():
            duration = int(call.data)
            start_timer(duration, call.message.chat.id)
        else:
            return answers_for_skils(call) or bot.answer_callback_query(call.id, text='–û—à–∏–±–∫–∞! –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ –≤—Ä–µ–º—è –∏–∑ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–Ω—ã—Ö –≤–∞—Ä–∏–∞–Ω—Ç–æ–≤')
    except telebot.apihelper.ApiTelegramException:
        return f'ERROR try one more later\n {bann}'
# def play(message):
#     bot.send_message(message.chat.id, "–£ –≤–∞—Å –µ—Å—Ç—å 3 –ø–æ–ø—ã—Ç–∫–∏ –ø—Ä–∞–≤–∏–ª—å–Ω–æ –æ—Ç–≤–µ—Ç–∏—Ç—å")
#     import random
#     correct = 0
#     mistakes = 0
#     answered_messages = set()
#     while mistakes < 3:
#         a = random.randrange(1, 100)
#         b = random.randrange(1, 100)
#         answer = a + b
#         bot.send_message(message.chat.id, f"{a} + {b} = ")
#         answer_message = None
#         while answer_message is None:
#             updates = bot.get_updates()
#             for update in updates:
#                 if update.message and update.message.text and update.message.text not in answered_messages:
#                     answer_message = update.message
#                     answered_messages.add(answer_message.text)
#                     break
#         if answer_message:
#             user_answer = answer_message.text
#             if int(user_answer) == answer:
#                 correct += 1
#                 bot.send_message(message.chat.id, '–ü—Ä–∞–≤–∏–ª—å–Ω–æ!')
#             else:
#                 mistakes += 1
#                 bot.send_message(message.chat.id, f'–ù–µ –ø—Ä–∞–≤–∏–ª—å–Ω–æ! –ü—Ä–∞–≤–∏–ª—å–Ω—ã–π –æ—Ç–≤–µ—Ç - {answer}')
#         else:
#             bot.send_message(message.chat.id, '–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –æ—Ç–≤–µ—Ç')
#     bot.send_message(message.chat.id, f'–ò–≥—Ä–∞ –æ–∫–æ–Ω—á–µ–Ω–∞! –ü—Ä–∞–≤–∏–ª—å–Ω—ã—Ö –æ—Ç–≤–µ—Ç–æ–≤ - {correct}, –Ω–µ–ø—Ä–∞–≤–∏–ª—å–Ω—ã—Ö –æ—Ç–≤–µ—Ç–æ–≤ - {mistakes}')
def money(message):
    try:
        loading_message = bot.send_message(message.chat.id, '‚è≥ –ó–∞–≥—Ä—É–∑–∫–∞...')
        response = requests.get("http://www.finmarket.ru/currency/rates/")
        src = response.text
        soup = bf(src, "lxml")
        new_response = requests.get("https://technewsleader.com/predictions/ru/bitcoin-price-prediction-2023")
        new_src = new_response.text
        new_soup = bf(new_src, "lxml")
        bitcoin = new_soup.find("div", class_="price-set")
        try:
            usd_money = soup.find("div", class_='value')
            USD_print = soup.find("div", class_='change red')
            if float(USD_print.text.replace(',', '.')) < 0:
                smile1 = "üíµ"
            else:
                smile1 = 'üíµ'
            euro_money = soup.find("div", class_='fintool_button', id="ft_52170").find(class_="value")
            euro_print = soup.find("div", class_='fintool_button', id="ft_52170").find(class_="change red")
            if float(euro_print.text.replace(',', '.')) < 0:
                smile = "üí∂"
            else:
                smile = 'üí∂'
            bot.edit_message_text(chat_id=loading_message.chat.id, message_id=loading_message.id,
                                text=f'üíµUSD - {usd_money.text}, {USD_print.text}{smile1}\
                                                    \n‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ\
                                                    \nüí∂EUR - {euro_money.text}, {euro_print.text}{smile}\
                                                    \n‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ\
                                                    \nüåêBITCOIN    {bitcoin.text}')
        except AttributeError:
            usd_money = soup.find("div", class_='value')
            USD_print = soup.find("div", class_='change green')
            if float(USD_print.text.replace(',', '.')) < 0:
                smile1 = "üìà"
            else:
                smile1 = 'üìâ'
            euro_money = soup.find("div", class_='fintool_button', id="ft_52170").find(class_="value")
            euro_print = soup.find("div", class_='fintool_button', id="ft_52170").find(class_="change green")
            if float(euro_print.text.replace(',', '.')) < 0:
                smile = "üìà"
            else:
                smile = 'üìâ'
            bot.edit_message_text(chat_id=loading_message.chat.id, message_id=loading_message.id,
                                text=f'üíµUSD - {usd_money.text}, {USD_print.text}{smile1}\
                                                    \n‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ\
                                                    \nüí∂EUR - {euro_money.text}, {euro_print.text}{smile}\
                                                    \n‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ\
                                                    \nüåêBITCOIN    {bitcoin.text}')
    except requests.ConnectionError:
        bot.send_message(message.chat.id, text=f'Error 404 is not definded')


def battun_for_skils(message):
    try:
        keyboard = telebot.types.ReplyKeyboardMarkup(resize_keyboard=True)
        butt1 = telebot.types.InlineKeyboardButton(text='–¢–∞–π–º–µ—Ä', callback_data='butt1')
        butt3 = telebot.types.InlineKeyboardButton(text='–ü–æ–≥–æ–¥–∞', callback_data='butt3')
        butt4 = telebot.types.InlineKeyboardButton(text='–ö—É—Ä—Å', callback_data='butt4')
        butt5 = telebot.types.InlineKeyboardButton(text='–ö–∞–ª–µ–Ω–¥–∞—Ä—å', callback_data='butt5')
        keyboard.add(butt1, butt3, butt4, butt5)
        bot.send_message(message.chat.id, f'–í–æ—Ç —á—Ç–æ —è –ø–æ–∫–∞ —É–º–µ—é:', reply_markup=keyboard)
    except telebot.apihelper.ApiTelegramException:
        return bot.send_message(message.chat.id, text='ERROR 401')

bot.polling()

